#!/usr/bin/python3 -u

import sys, errno, time, random, argparse
from kafka import KafkaConsumer
from hvbenchapi.conf import logconf
import json

sys.stdin.close()

ARGS = {'kafka': "127.0.0.1"}

parser = argparse.ArgumentParser(description="Netdata Module")
parser.add_argument('update_every', type=int, nargs='?', help='update frequency in seconds')
parser.add_argument('-k', '--kafka', help="Address of the kafka host.", default=ARGS['kafka'])

cmdargs = parser.parse_args()
consumer = KafkaConsumer('hvbench', 'hvmonitor',bootstrap_servers="%s:9092" % cmdargs.kafka, group_id='hvnetdata123')
update_every = 1

if cmdargs.update_every != None:
    update_every = cmdargs.update_every

update_every *= 1000
get_millis = lambda: int(round(time.time() * 1000))

#Initialize Chart for CPU Utilization of hvmonitor
try: 
    # template is:   'CHART type.id name title units [family [context [charttype [priority [update_every]]]]]'
    sys.stdout.write('CHART CPU_Utilization.hvmonitor "CPU Utilization of hvmonitor" "Basic Unit" "Basic Family" "Basic Category" line 100000 %s\n' % int(update_every / 1000))
    sys.stdout.write('DIMENSION BasicValue "CPU_Utilization" absolute 1 1\n')
    sys.stdout.flush()
except IOError as e:
    sys.stderr.write("Failed to send.")
    sys.exit(0)

#Initialize chart for Total Number of tenants
try:
    sys.stdout.write('CHART num_of_tenants.total "Number of Tenants" "Basic Unit" "Basic Family" "Basic Category" line 100000 %s\n' % int(update_every / 1000))
    sys.stdout.write('DIMENSION num_tenants "num_tenants" absolute 1 1\n')
    sys.stdout.flush()
except IOError as e:
    sys.stderr.write("Failed to send.")
    sys.exit(0)


count = 0
last_run = next_run = now = get_millis()
cpu_util=0

num_tenants=0
list_tenants=[]
sum_msgs={}
init_chart=0
for msg in consumer:
    if next_run <= now:
        count += 1
        if (str(msg.topic)== "hvmonitor"):
            jmsg = json.loads(str(msg.value, 'ASCII'))
            cpu_util= jmsg['proc_sched_se.sum_exec_runtime']
        if (str(msg.topic)== "hvbench"):
            jmsg = json.loads(str(msg.value, 'ASCII'))
             
            if (jmsg['tenant'] not in list_tenants): #currently not checking whether a tenant is removed or not
                list_tenants.append(jmsg['tenant'])
                num_tenants=len(list_tenants)
            #Initialize chart for Total Messeges per Tenant
            try:
                sys.stdout.write('CHART total_messages.pertenant "Total Messages Per Tenant" "Basic Unit" "Basic Family" "Basic Category" line 100000 %s\n' % int(update_every / 1000))
                init_chart=1
                #Add a new Dimension to the chart for the newly added tenant
                sys.stdout.write('DIMENSION Tenant%s "%s" absolute 1 1\n' %(len(list_tenants),jmsg['tenant']))
                sys.stdout.flush()
            except IOError as e:
                sys.stderr.write("Failed to send.")
                sys.exit(0)
            sum_msgs[jmsg["tenant"]] = (int(jmsg["requests_ECHO_REQUEST_cnt"])+int(jmsg["requests_FEATURE_REQUEST_cnt"])+int(jmsg["requests_FLOW_MOD_cnt"])+int(jmsg["requests_PACKET_OUT_UDP_cnt"])+int(jmsg["requests_STATS_REQUEST_FLOW_cnt"])+int(jmsg["requests_STATS_REQUEST_PORT_cnt"]))
        now = get_millis()

        while next_run <= now:
            next_run += update_every

        dt = now - last_run
        last_run = now

        if count == 1:
            dt = 0

        try:
            sys.stdout.write('BEGIN CPU_Utilization.hvmonitor %s\n' % (dt * 1000))
            sys.stdout.write('SET BasicValue = %s\n' % cpu_util)
            sys.stdout.write('END\n')
            sys.stdout.flush()
        except IOError as e:
            sys.stdout.write("Failed to send.\n")
            sys.exit(0)
        try:
            sys.stdout.write('BEGIN num_of_tenants.total %s\n' % (dt * 1000))
            sys.stdout.write('SET num_tenants = %s\n' % num_tenants)
            sys.stdout.write('END\n')
            sys.stdout.flush()
        except IOError as e:
            sys.stdout.write("Failed to send.\n")
            sys.exit(0)
        if (init_chart==1):# try sending data only after the chart has been created 
            try:
                sys.stdout.write('BEGIN total_messages.pertenant %s\n' % (dt * 1000))
                num=1
                for i in list_tenants:
                    sys.stdout.write('SET Tenant%s = %s\n' % (num,sum_msgs[i]))
                    num= num +1
                sys.stdout.write('END\n')
                sys.stdout.flush()
            except IOError as e:
                sys.stdout.write("Failed to send.\n")
                sys.exit(0)

    time.sleep(update_every / 1000 / 10)
    now = get_millis()
